// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  price       Float
  image       String
  stock       Int      @default(0) // Dejamos listo el campo de stock
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  OrderItem OrderItem[]
}

// modelos para el auth

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   // Para guardar la contraseña encriptada
  image         String?
  role          String    @default("USER") // Rol para diferenciar ADMIN/USER
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// modelos para la orden


model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime    @default(now())
  total           Float
  
  // Nuevos campos para el cliente
  customerName    String
  customerEmail   String
  customerPhone   String
  deliveryType    String      // "pickup" o "delivery"
  address         String?
  comments        String?
  status          String      @default("PENDING") // PENDING, PREPARING, COMPLETED, etc.

  // Relación con los items del pedido
  items           OrderItem[]
}

// NUEVO MODELO para guardar cada línea del pedido (ej: 2x Pizza Siciliana)

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

